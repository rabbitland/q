#ifndef __Q_TOKEN__
#define __Q_TOKEN__

#define GENERATE_ENUM(ENUM) ENUM,
#define GENERATE_STRING(STRING) #STRING,

#define FOREACH_TOKEN(TOKEN) \
  TOKEN(LINE_BREAK) \
  TOKEN(NUMERIC_LITERAL) \
  TOKEN(STRING_LITERAL) \
  TOKEN(COMMENT) \
  TOKEN(IDENTIFIER) \
  TOKEN(COLON_COLON) \
  TOKEN(DOT_DOT) \
  TOKEN(EQUALITY) \
  TOKEN(INEQUALITY) \
  TOKEN(LOGICAL_OR) \
  TOKEN(LOGICAL_AND) \
  TOKEN(BIT_OR_ASSIGN) \
  TOKEN(BIT_XOR_ASSIGN) \
  TOKEN(BIT_NOT_ASSIGN) \
  TOKEN(AND_ASSIGN) \
  TOKEN(PLUS_ASSIGN) \
  TOKEN(MINUS_ASSIGN) \
  TOKEN(TIMES_ASSIGN) \
  TOKEN(DIV_ASSIGN) \
  TOKEN(LEFT_SHIFT) \
  TOKEN(RIGHT_SHIFT) \
  TOKEN(GREATER_THAN_EQUAL) \
  TOKEN(LESS_THAN_EQUAL) \
  TOKEN(INCREMENT) \
  TOKEN(DECREMENT) \
  TOKEN(MOD_ASSIGN) \
  TOKEN(DOT) \
  TOKEN(OPEN_PARENTHESIS) \
  TOKEN(CLOSE_PARENTHESIS) \
  TOKEN(OPEN_BRACE) \
  TOKEN(CLOSE_BRACE) \
  TOKEN(OPEN_BRACKET) \
  TOKEN(CLOSE_BRACKET) \
  TOKEN(SEMICOLON) \
  TOKEN(COLON) \
  TOKEN(COMMA) \
  TOKEN(ASSIGNMENT) \
  TOKEN(BIT_OR) \
  TOKEN(BIT_AND) \
  TOKEN(BIT_XOR) \
  TOKEN(BIT_NOT) \
  TOKEN(NOT) \
  TOKEN(PLUS) \
  TOKEN(MINUS) \
  TOKEN(TIMES) \
  TOKEN(DIV) \
  TOKEN(GREATER_THAN) \
  TOKEN(LESS_THAN) \
  TOKEN(MOD) \
  TOKEN(START_OF_KEYWORDS) \
  TOKEN(IF_KEYWORD) \
  TOKEN(WHILE_KEYWORD) \
  TOKEN(FOR_KEYWORD) \
  TOKEN(BREAK_KEYWORD) \
  TOKEN(CONTINUE_KEYWORD) \
  TOKEN(RETURN_KEYWORD) \
  TOKEN(SWITCH_KEYWORD) \
  TOKEN(CASE_KEYWORD) \
  TOKEN(USE_KEYWORD) \
  TOKEN(VAR_KEYWORD) \
  TOKEN(PRINT_KEYWORD) \
  TOKEN(INT_KEYWORD) \
  TOKEN(VOID_KEYWORD) \
  TOKEN(STRING_KEYWORD) \
  TOKEN(NULL_KEYWORD) \
  TOKEN(ARROW_RIGHT) \
  TOKEN(ARROW_LEFT) \

// TODO(qti3e) Use this to generate XXX_KEYWORD tokens.
#define FOREACH_KEYWORD(KEYWORD) \
  KEYWORD(if) \
  KEYWORD(while) \
  KEYWORD(for) \
  KEYWORD(break) \
  KEYWORD(continue) \
  KEYWORD(return) \
  KEYWORD(switch) \
  KEYWORD(case) \
  KEYWORD(use) \
  KEYWORD(var) \
  KEYWORD(print) \
  KEYWORD(int) \
  KEYWORD(void) \
  KEYWORD(string) \
  KEYWORD(null) \

enum TokenType {
  FOREACH_TOKEN(GENERATE_ENUM)
};

static char *TOKEN_STRINGS[] = {
  FOREACH_TOKEN(GENERATE_STRING)
};

static char *KEYWORDS[] = {
  FOREACH_KEYWORD(GENERATE_STRING)
};

struct Token {
  enum TokenType type;
  int start;
  int len;
} typedef Token; 

struct TokenArray {
  size_t count;
  Token tokens[];
} typedef TokenArray;

char *tokenData(Token *token, char **code);
char *tokenName(Token *token);
void printToken(Token *token, char **code);
void freeTokenArray(TokenArray *t);
TokenArray *tokenize(char *code, int skip_comments);

#endif
